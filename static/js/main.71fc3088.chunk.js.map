{"version":3,"sources":["providers/Context.tsx","components/Play.tsx","components/Hangman.tsx","components/UsedLetterBoard.tsx","components/Game.tsx","App.tsx","index.tsx"],"names":["appContextDefaultValue","gameState","setGameState","result","setResult","keyPhrase","setKeyPhrase","RootContext","React","createContext","props","useState","Provider","value","children","Play","rootContext","useContext","randomPhrase","phrases","Math","floor","random","length","onClick","e","preventDefault","gameStates","Hangman","src","alt","UsedLetterBoard","className","usedLetters","join","stringArray","Game","setUsedLetters","choosingLetter","setChoosingLetter","keyPhraseArray","setKeyPhraseArray","resultPhraseArray","setResultPhraseArray","useEffect","console","log","includes","forEach","split","onSubmit","toUpperCase","_resultPhraseArray","idx","onKeyDown","keyCode","key","toLowerCase","tabIndex","type","name","placeholder","onChange","target","charCodeAt","App","href","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.71fc3088.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nexport interface IProviderProps {\n  children?: any;\n}\n\nconst appContextDefaultValue = {\n  gameState: -1,\n  setGameState: (gameState: number) => {},\n  result: '',\n  setResult: (result: string) => {},\n  keyPhrase: '',\n  setKeyPhrase: (keyPhrase: string) => {}\n}\n\nexport const RootContext = React.createContext(appContextDefaultValue);\n\nexport default (props: IProviderProps) => {\n  const [gameState, setGameState] = useState(appContextDefaultValue.gameState);\n  const [result, setResult] = useState(appContextDefaultValue.result);\n  const [keyPhrase, setKeyPhrase] = useState(appContextDefaultValue.keyPhrase);\n\n  return (\n    <RootContext.Provider\n      value={{\n        gameState,\n        setGameState,\n        result,\n        setResult,\n        keyPhrase,\n        setKeyPhrase,\n      }}\n    >\n      {props.children}\n    </RootContext.Provider>\n  );\n};\n","import React, { useContext } from 'react';\nimport phrases from '../phrases.json';\nimport { RootContext } from '../providers/Context';\n\nconst Play = () => {\n  const rootContext = useContext(RootContext);\n\n  // Start the game\n  const start = (e: any) => {\n    e.preventDefault();\n    randomPhrase();\n  };\n\n  // Random the phrase from the pharses.json\n  const randomPhrase = () => {\n    rootContext.setKeyPhrase(phrases[Math.floor(Math.random() * phrases.length)]);\n    rootContext.setGameState(0);\n  };\n  return (\n    <div>\n      <button onClick={start}>{rootContext.result !== '' ? 'Replay' : 'Start'}</button>\n    </div>\n  );\n};\n\nexport default Play;\n","import React from 'react';\n\nconst gameStates = [\n  'img/blank.png',\n  'img/head.png',\n  'img/body.png',\n  'img/left-arm.png',\n  'img/right-arm.png',\n  'img/left-leg.png',\n  'img/right-leg.png',\n  'img/animated.gif',\n];\n\n// Display the image based on the gameState\nconst Hangman = (props: any) => {\n  return (\n    <div>\n      <img src={gameStates[props.gameState]} alt=\"dead hangman\" />\n    </div>\n  );\n};\n\nexport default Hangman;\n","import React from 'react';\n\n// Display the usedLetters\nconst UsedLetterBoard = (props: any) => {\n  return (\n    <div className=\"usedLetter\">\n      <h2>Used Letter Board</h2>\n      <p>{props.usedLetters ? props.usedLetters.join(', ') : ''}</p>\n    </div>\n  );\n};\n\nexport default UsedLetterBoard;\n","import React, { useState, useEffect, useContext } from 'react';\nimport HangmanComponent from './Hangman';\nimport UsedLetterBoardComponent from './UsedLetterBoard';\nimport { RootContext } from '../providers/Context';\n\nlet stringArray: string[] = [];\n\nconst Game = () => {\n  const rootContext = useContext(RootContext);\n  const [usedLetters, setUsedLetters] = useState(stringArray);\n  const [choosingLetter, setChoosingLetter] = useState('');\n  const [keyPhraseArray, setKeyPhraseArray] = useState(stringArray);\n  const [resultPhraseArray, setResultPhraseArray] = useState(stringArray);\n\n  // Set the result and gameState (global) based on the gameState (local)\n  useEffect(() => {\n      console.log(rootContext.gameState)\n    switch (rootContext.gameState) {\n      case 7: {\n        rootContext.setResult('You loose!!!');\n        rootContext.setGameState(-1);\n        break;\n      }\n      default: {\n        rootContext.setResult('');\n      }\n    }\n  }, [rootContext]);\n\n  // User will win if there is no more guest letters\n  useEffect(() => {\n    if (\n      resultPhraseArray &&\n      resultPhraseArray.length > 0 &&\n      !resultPhraseArray.includes('_')\n    ) {\n      rootContext.setResult('You win!!!');\n      rootContext.setGameState(-1);\n    }\n  }, [resultPhraseArray, rootContext]);\n\n  // Convert guest letters to '_' and space to '-'\n  useEffect(() => {\n    if(keyPhraseArray && keyPhraseArray.length > 0) {\n      keyPhraseArray.forEach((e) => {\n        if (e !== ' ') {\n          setResultPhraseArray((resultPhraseArray) => [\n            ...resultPhraseArray,\n            '_',\n          ]);\n        } else {\n          setResultPhraseArray((resultPhraseArray) => [\n            ...resultPhraseArray,\n            '-',\n          ]);\n        }\n      });\n    }\n  }, [keyPhraseArray]);\n\n  // Convert guest phrase to array of letters\n  useEffect(() => {\n    if (rootContext.keyPhrase) {\n      setKeyPhraseArray(rootContext.keyPhrase.split(''));\n    }\n  }, [rootContext.keyPhrase]);\n\n  // Only allow 1 letter when choosing\n  useEffect(() => {\n    if (choosingLetter && choosingLetter.length > 1) {\n      setChoosingLetter((choosingLetter) => choosingLetter[1]);\n    }\n  }, [choosingLetter]);\n\n  // Handle the input value from the form\n  const inputHandle = (e: any) => {\n    const { name, value } = e.target;\n    if (name === 'letter') {\n      if (value.charCodeAt(0) >= 65 && value.charCodeAt(0) <= 90) {\n        setChoosingLetter(value.toLowerCase());\n      }\n    }\n  };\n\n  // Handle key press event\n  const onKeyPressed = (e: any) => {\n    // if the keyPressed from a => z\n    if (e.keyCode >= 65 && e.keyCode <= 90) {\n      setChoosingLetter(e.key.toLowerCase());\n    }\n    // if the keyPressed is 'Enter'\n    if (e.keyCode === 13) {\n      onSubmit();\n    }\n  };\n\n  // Handle the submit button\n  const onSubmit = () => {\n    // if choosing letter is not null or empty\n    if (choosingLetter && choosingLetter !== '') {\n      // if there is at least 1 letter in the answer than add it to usedLetter array and convert guested letter to the result\n      if (!usedLetters.includes(choosingLetter.toUpperCase())) {\n        setUsedLetters((usedLetters) => [\n          ...usedLetters,\n          choosingLetter.toUpperCase(),\n        ]);\n        if (keyPhraseArray.includes(choosingLetter)) {\n          const _resultPhraseArray = [...resultPhraseArray];\n          for (let idx = keyPhraseArray.length - 1; idx >= 0; --idx) {\n            if (keyPhraseArray[idx] === choosingLetter) {\n              _resultPhraseArray[idx] = choosingLetter.toUpperCase();\n            }\n          }\n          setResultPhraseArray(_resultPhraseArray);\n        } else {\n          // If the guested letter is missed then change the gameState\n          rootContext.setGameState(++rootContext.gameState);\n        }\n      }\n      // if choosen letter is submited then empty the input value\n      setChoosingLetter('');\n    }\n  };\n  return (\n    <div onKeyDown={onKeyPressed} tabIndex={0}>\n      <HangmanComponent gameState={rootContext.gameState}/>\n      <p className=\"result\">{resultPhraseArray && resultPhraseArray.join(' ')}</p>\n      <UsedLetterBoardComponent usedLetters={usedLetters} />\n      <div className=\"mt-1\">\n        <input\n          type=\"text\"\n          value={choosingLetter || ''}\n          name=\"letter\"\n          placeholder=\"Choose 1 letter\"\n          onChange={inputHandle}\n        />\n        <button onClick={onSubmit}>Submit</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Game;\n","import React, { useContext } from 'react';\nimport './styles.css';\nimport PlayComponent from './components/Play';\nimport GameComponent from './components/Game';\nimport { RootContext } from './providers/Context';\n\nconst App = () => {\n  const rootContext = useContext(RootContext);\n\n  return (\n    <div className=\"App\">\n      {rootContext.gameState >= 0 && <GameComponent />}\n      {rootContext.gameState === -1 && (\n        <>\n          <div className=\"title\">\n            <h1>Write a Hangman App!</h1>\n            <h2\n              className={`result ${\n                rootContext.result.includes('win') ? 'win' : ''\n              }`}\n            >\n              {rootContext.result}\n            </h2>\n            <img src=\"img/animated.gif\" alt=\"dead hangman\" />\n            <PlayComponent />\n          </div>\n          <ul>\n            <li>\n              Never played hangman? See{' '}\n              <a href=\"https://en.wikipedia.org/wiki/Hangman_(game)\">\n                Wikipedia\n              </a>{' '}\n              for how to play.\n            </li>\n            <li>\n              See <code>mockups</code> folder for loose program mockup\n            </li>\n            <li>\n              Pick a random phrase from <code>phrases.json</code>\n            </li>\n            <li>\n              Allow user to type letters (on click buttons) until they guess the\n              phrase or the man dies (i.e. 6 wrong letters)\n            </li>\n            <li>\n              Make use of the <code>img</code> folder, if you wish (or not)\n            </li>\n            <li>\n              Use modern industry best practices. Yes: hooks, context. No: class\n              components, Redux.\n            </li>\n            <li>\n              Write some tests (optional, but if you do use\n              react/testing-library)\n            </li>\n            <li>\n              Don't worry <i>too</i> much about how it looks (unless you want\n              to)\n            </li>\n            <li>\n              <b>Make sure it's playable!</b> Can you win? Can you loose?\n            </li>\n            <li>Be creative and have fun!</li>\n          </ul>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport RootContext from './providers/Context';\nimport App from './App';\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(\n  <React.StrictMode>\n    <RootContext>\n      <App />\n    </RootContext>\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}